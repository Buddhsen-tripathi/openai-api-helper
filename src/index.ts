import axios, { AxiosResponse } from "axios";
export { PromptBuilder } from "./promptBuilder";

interface OpenAIAPIResponse {
	choices: { message: { content: string } }[];
}

/**
 * A helper class to interact with the OpenAI API, specifically for making chat completions using GPT models.
 */
class OpenAIAPIHelper {
	private apiKey: string;
	private baseUrl: string;

	/**
	 * Creates an instance of OpenAIAPIHelper.
	 * @param {string} apiKey - Your OpenAI API key. This is required to authenticate API requests.
	 */
	constructor(apiKey: string) {
		this.apiKey = apiKey;
		this.baseUrl = "https://api.openai.com/v1/chat/completions";
	}

	/**
	 * Makes a request to the OpenAI API with the provided parameters and returns the result.
	 *
	 * @param {string} model - The GPT model to use (e.g., "gpt-3.5-turbo").
	 * @param {string} prompt - The prompt text to send to the model for generating a response.
	 * @param {number} [temperature=0.7] - (Optional) The sampling temperature, which controls the randomness of the model's output. Lower values make the output more deterministic.
	 * @param {number} [resultType=1] - (Optional) Determines the type of result returned. `0` returns the complete Axios response object, while `1` returns just the generated message content.
	 * @returns {Promise<AxiosResponse<OpenAIAPIResponse> | string>} - Returns the full Axios response if `resultType` is `0`, or just the message content if `resultType` is `1`.
	 * @throws Will throw an error if the API call fails.
	 *
	 * @example
	 * const apiHelper = new OpenAIAPIHelper('your-api-key');
	 * const message = await apiHelper.call('gpt-3.5-turbo', 'Tell me a joke', 0.5, 1);
	 * console.log(message);  // Outputs the joke generated by the model.
	 */
	async call(
		model: string,
		prompt: string,
		temperature: number = 0.7,
		resultType: number = 1
	): Promise<AxiosResponse<OpenAIAPIResponse> | string> {
		try {
			const response: AxiosResponse<OpenAIAPIResponse> = await axios.post(
				this.baseUrl,
				{
					model: model,
					messages: [{ role: "user", content: prompt }],
					temperature: temperature,
				},
				{
					headers: {
						Authorization: `Bearer ${this.apiKey}`,
						"Content-Type": "application/json",
					},
				}
			);
			if (resultType === 0) {
				return response;
			} else if (resultType === 1) {
				return response.data.choices[0].message.content;
			}
		} catch (error) {
			console.error("Error calling OpenAI API:", error);
			throw error;
		}
		return "Request completed.";
	}
}

export default OpenAIAPIHelper;
